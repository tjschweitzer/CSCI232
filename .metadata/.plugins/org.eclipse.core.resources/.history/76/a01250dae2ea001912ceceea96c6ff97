import java.util.Comparator;
import java.util.Arrays;
import java.util.Collections;

public class BinarySearchDeluxe {

    // Returns the index of the first key in a[] that equals the search key, or -1 if no such key.
    public static <Key> int firstIndexOf(Key[] a, Key key, Comparator<Key> comparator) {
        //Todo: if check for null
        int lowVal = 0; //sets low to start of the array
        int highVal = a.length - 1; // sets high to start of array
        int middleVal; // initiates the middle value to be calculated at the start of each loop

        if (comparator.compare(key,a[0])==0) {
            return 0;
        }
        while (highVal> lowVal ) {

            middleVal = lowVal + ((highVal-lowVal )/2);
//            System.out.println("Low Value: "+lowVal);
//            System.out.println("High Value: "+highVal);
//            System.out.println("Middle Value: "+middleVal);

            
            if (comparator.compare(a[0], key) == 0) return 0;


            
            if (comparator.compare(key, a[middleVal])<0 ) { 
                //value is not in the top half of range
                highVal=middleVal-1;
            }else if (comparator.compare(key, a[middleVal])>0) { // value is not in bottom half of range
                lowVal=middleVal+1;
            }else if (comparator.compare(a[middleVal-1], a[middleVal])==0) { // if middle and left of middle are equal
                highVal=middleVal-1;
            }else    {
                return middleVal;
            }
            
            
        }
        
      System.out.println("Low Value: "+lowVal);
      System.out.println("High Value: "+highVal);
        return -2;
    }

    // Returns the index of the last key in a[] that equals the search key, or -1 if no such key.
    public static <Key> int lastIndexOf(Key[] a, Key key, Comparator<Key> comparator) {
        //Todo: if check for null
        int lowVal = 0; //sets low to start of the array
        int highVal = a.length - 1; // sets high to start of array
        int middleVal; // initiates the middle value to be calculated at the start of each loop
        while (highVal> lowVal ) {
            middleVal = ((highVal - lowVal)/2)+lowVal;
            if (comparator.compare(key, a[middleVal])<0) { 
                //value is not in the top half of range
                highVal=--middleVal;
            }else if (comparator.compare(key, a[middleVal])>0) { // value is not in bottom half of range
                lowVal=++middleVal;
            }else if (comparator.compare(a[middleVal-1], a[middleVal])==0) { // if middle and left of middle are equal
                highVal=++middleVal;
            }else    {
                return middleVal;
            }
                        
            
        }
        return -11;
    }

    // unit testing (you should have some Unit Testing here to confirm that your methods work)
    public static void main(String[] args)   {
        // read in the terms from a file
        String filename = args[0];
        In in = new In(filename);
        int N = in.readInt();
        Term[] terms = new Term[N];
        for (int i = 0; i < N; i++) {
            long weight = in.readLong();           // read the next weight
            in.readChar();                         // scan past the tab
            String query = in.readLine();          // read the next query
            terms[i] = new Term(query, weight);    // construct the term
        }

        // read in queries from standard input and print out the top k matching terms
        int k = 10;
        Autocomplete autocomplete = new Autocomplete(terms);
        while (StdIn.hasNextLine()) {
            String prefix = StdIn.readLine();
            Term[] results = autocomplete.allMatches(prefix);
            for (int i = 0; i < Math.min(k, results.length); i++)
                StdOut.println(results[i]);
        }
    }
}