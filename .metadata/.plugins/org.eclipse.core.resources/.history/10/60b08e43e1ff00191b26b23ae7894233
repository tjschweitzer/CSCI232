import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import edu.princeton.cs.algs4.Bag;
import edu.princeton.cs.algs4.DepthFirstOrder;
import edu.princeton.cs.algs4.DepthFirstSearch;
import edu.princeton.cs.algs4.Digraph;

public class WordNet {

    HashMap<Integer, Bag<String>> synsetMap  = new HashMap<Integer, Bag<String>>(); 
    HashMap<String,Integer> wordMap = new HashMap<String, Integer>();
    Digraph myDigraph;

    
    
   // constructor takes the name of the two input files
   public WordNet(String synsets, String hypernyms)
   {
       In synsetsIn = new In(synsets);
       In hypernymsIn = new In(hypernyms);
       
       Integer counterInteger =0;
       
       while (synsetsIn.hasNextLine()) {
           
           String[] splitStrings = synsetsIn.readLine().split(",");
           
           Integer idInteger = Integer.parseInt(splitStrings[0]);
           String[] synsetValues = splitStrings[1].split(" ");

           counterInteger++;
       
           Bag<String>myBag = new Bag<String>();
           for (int i = 0; i < synsetValues.length; i++) {
               myBag.add(synsetValues[i]);               
               wordMap.put(synsetValues[i], idInteger);
                }
           synsetMap.put(idInteger, myBag);
       }
       
       
      myDigraph = new Digraph(counterInteger); 
      while (hypernymsIn.hasNextLine()) {
        String[] parseStrings = hypernymsIn.readLine().split(",");
        for (int i = 1; i < parseStrings.length; i++) {
            myDigraph.addEdge(Integer.parseInt(parseStrings[0]),Integer.parseInt(parseStrings[i]));
        }

        
    }
      
      
      
   
   
       
   }

   // all WordNet nouns
   public Iterable<String> nouns(){
       return wordMap.keySet();
   }

   // is the word a WordNet noun?
   public boolean isNoun(String word) {
       return wordMap.containsKey(word);
   }

   // return a synset (second field of synsets.txt) that is a shortest common ancestor
   // of noun1 and noun2 (defined below)
   public String sca(String noun1, String noun2) {
       
   }

   // distance between noun1 and noun2 (defined below)
   public int distance(String noun1, String noun2) {
       
   }
   
   
   
//   public class ShortestCommonAncestor {
//       boolean[] marked;
//       // constructor takes a rooted DAG as argument
//       public ShortestCommonAncestor(Digraph G) {
//       marked  = new boolean[G.V()];
//       
//       DepthFirstOrder depthFirstSearch = new DepthFirstOrder(G)
//       
//               
//               
//       }
//       
//
//       // length of shortest ancestral path between v and w
//       public int length(int v, int w) {
//           
//       }
//
//       // a shortest common ancestor of vertices v and w
//       public int ancestor(int v, int w) {
//           
//       }
//
//       // length of shortest ancestral path of vertex subsets A and B
//       public int length(Iterable<Integer> subsetA, Iterable<Integer> subsetB) {
//           
//       }
//
//       // a shortest common ancestor of vertex subsets A and B
//       public int ancestor(Iterable<Integer> subsetA, Iterable<Integer> subsetB) {
//           
//       }
//   }


   // do unit testing of this class
   public static void main(String[] args) {
       WordNet myWordNet = new WordNet(args[0], args[1]);
   }
}