import java.util.Comparator;
import java.util.Arrays;
import java.util.Collections;

public class BinarySearchDeluxe {

    // Returns the index of the first key in a[] that equals the search key, or -1 if no such key.
    public static <Key> int firstIndexOf(Key[] a, Key key, Comparator<Key> comparator) {
        //Todo: if check for null
        int lowVal = 0; //sets low to start of the array
        int highVal = a.length - 1; // sets high to start of array
        int middleVal; // initiates the middle value to be calculated at the start of each loop

        while (highVal> lowVal ) {

            middleVal = ((highVal-lowVal )/2)+lowVal;
            System.out.println("Low Value: "+lowVal);
            System.out.println("High Value: "+highVal);
            System.out.println("Middle Value: "+middleVal);

            
            if (comparator.compare(key, a[middleVal])<0 ) { 
                //value is not in the top half of range
                highVal=middleVal-1;
            }else if (comparator.compare(key, a[middleVal])>0) { // value is not in bottom half of range
                lowVal=middleVal-1;
            }else if (comparator.compare(a[middleVal-1], a[middleVal])==0) { // if middle and left of middle are equal
                highVal=middleVal-1;
            }else    {
                return middleVal;
            }
            
            
        }
        return -11;
    }

    // Returns the index of the last key in a[] that equals the search key, or -1 if no such key.
    public static <Key> int lastIndexOf(Key[] a, Key key, Comparator<Key> comparator) {
        //Todo: if check for null
        int lowVal = 0; //sets low to start of the array
        int highVal = a.length - 1; // sets high to start of array
        int middleVal; // initiates the middle value to be calculated at the start of each loop
        while (highVal> lowVal ) {
            middleVal = ((highVal - lowVal)/2)+lowVal;
            if (comparator.compare(key, a[middleVal])<0) { 
                //value is not in the top half of range
                highVal=--middleVal;
            }else if (comparator.compare(key, a[middleVal])>0) { // value is not in bottom half of range
                lowVal=++middleVal;
            }else if (comparator.compare(a[middleVal-1], a[middleVal])==0) { // if middle and left of middle are equal
                highVal=++middleVal;
            }else    {
                return middleVal;
            }
                        
            
        }
        return -11;
    }

    // unit testing (you should have some Unit Testing here to confirm that your methods work)
    public static void main(String[] args)   {
        Integer[] numbers = {10, 10, 10, 9, 9, 9, 8, 8, 8, 7, 7, 7, 6, 6, 6, 5, 5, 5, 4, 4, 4, 3, 3, 3, 2, 2, 2, 1, 1, 1};
        Arrays.sort(numbers);
        System.out.print(BinarySearchDeluxe.firstIndexOf (numbers, 10, Collections.reverseOrder()) + "\t");
        System.out.println(BinarySearchDeluxe.lastIndexOf(numbers, 10, Collections.reverseOrder()));
        System.out.print(BinarySearchDeluxe.firstIndexOf (numbers, 9, Collections.reverseOrder()) + "\t");
        System.out.println(BinarySearchDeluxe.lastIndexOf(numbers, 9, Collections.reverseOrder()));
        System.out.print(BinarySearchDeluxe.firstIndexOf (numbers, 4, Collections.reverseOrder()) + "\t");
        System.out.println(BinarySearchDeluxe.lastIndexOf(numbers, 4, Collections.reverseOrder()));
        System.out.print(BinarySearchDeluxe.firstIndexOf (numbers, 0, Collections.reverseOrder()) + "\t");
        System.out.println(BinarySearchDeluxe.lastIndexOf(numbers, 0, Collections.reverseOrder()));
        System.out.print(BinarySearchDeluxe.firstIndexOf (numbers, 11, Collections.reverseOrder()) + "\t");
        System.out.println(BinarySearchDeluxe.lastIndexOf(numbers, 11, Collections.reverseOrder()));
    }
}