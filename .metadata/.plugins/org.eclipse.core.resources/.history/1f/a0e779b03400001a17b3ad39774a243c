import edu.princeton.cs.algs4.DepthFirstOrder;
import edu.princeton.cs.algs4.Digraph;

public class ShortestCommonAncestor {
    boolean[] marked;
    // constructor takes a rooted DAG as argument
    public ShortestCommonAncestor(Digraph G) {
    marked  = new boolean[G.V()];
    
    DepthFirstOrder depthFirstSearch = new DepthFirstOrder(G)
    
            
            
    }
    

    // length of shortest ancestral path between v and w
    public int length(int v, int w) {
        
    }

    // a shortest common ancestor of vertices v and w
    public int ancestor(int v, int w) {
        
    }

    // length of shortest ancestral path of vertex subsets A and B
    public int length(Iterable<Integer> subsetA, Iterable<Integer> subsetB) {
        
    }

    // a shortest common ancestor of vertex subsets A and B
    public int ancestor(Iterable<Integer> subsetA, Iterable<Integer> subsetB) {
        
    }
}
